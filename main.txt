from dotenv import load_dotenv
from pydantic import BaseModel
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import PydanticOutputParser
from langchain.agents import create_tool_calling_agent, AgentExecutor
from tools import search_tool, wiki_tool, save_tool, json_save_tool, shorten_tool, markdown_tool
import os
load_dotenv()


# -------------------- Define Output Model -------------------- #
class ResearchResponse(BaseModel):
    topic: str
    summary: str
    sources: list[str]
    tools_used: list[str]


# -------------------- Initialize LLM -------------------- #
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",
    google_api_key=os.getenv("GEMINI_API_KEY"),
)

# -------------------- Output Parser -------------------- #
parser = PydanticOutputParser(pydantic_object=ResearchResponse)

# -------------------- Prompt Template -------------------- #
prompt = ChatPromptTemplate.from_messages([
    ("system", """
        You are 'SageBot', a research-focused AI agent. Use tools like Wikipedia, DuckDuckGo, and SaveTool to research and store information.
        You must summarize the topic clearly using reliable sources. Wrap the result in the required format with NO extra commentary.
        If user includes phrases like 'save this' or 'save to file', invoke the save_text_to_file tool.
        {format_instructions}
    """),
    ("placeholder", "{chat_history}"),
    ("human", "{query}"),
    ("placeholder", "{agent_scratchpad}")
]).partial(format_instructions=parser.get_format_instructions())


# -------------------- Agent + Executor -------------------- #
tools = [
    search_tool,
    wiki_tool,
    save_tool,
    json_save_tool,
    shorten_tool,
    markdown_tool
]

agent = create_tool_calling_agent(
    llm=llm,
    prompt=prompt,
    tools=tools
)

agent_executor = AgentExecutor(
    agent=agent,
    tools=tools,
    verbose=True,
    handle_parsing_errors=True,
)

# -------------------- Run -------------------- #
if __name__ == "__main__":
    try:
        query = input("What can I help you research? (e.g., 'Albert Einstein, save to file')\n> ")
        raw_response = agent_executor.invoke({
            "query": query,
            "chat_history": [],
            "agent_scratchpad": [],
        })

        # Attempt to parse output into Pydantic model
        structured_response = parser.parse(raw_response.get("output"))
        print("\nüß† RESEARCH SUMMARY üß†")
        print(structured_response)

        # If not saved automatically, give manual fallback
        if "save" not in query.lower():
            save_input = input("\nWould you like to save this summary to file? (y/n): ").strip().lower()
            if save_input == "y":
                save_tool.func(str(structured_response))

    except Exception as e:
        print(f"\n‚ùå Something went wrong: {e}")
